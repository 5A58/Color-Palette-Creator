import chroma from 'chroma-js';

const levels = [50, 100, 200, 300, 400, 500, 600, 700, 800, 900];

function generatePalette(starterPalette) {
  const newPalette = {
    paletteName: starterPalette.paletteName,
    id: starterPalette.id,
    emoji: starterPalette.emoji,
    colors: {},
  };

  // create an empty array for each level
  for (const level of levels) {
    newPalette.colors[level] = [];
  }

  for (const color of starterPalette.colors) {
    // for each of the colors in the current palette, generate a scale of 10 shades
    // ordered light to dark
    const scale = generateScale(color.color, levels.length).reverse();
    for (const i in scale) {
      // add the new color to the palette under the corresponding level
      newPalette.colors[levels[i]].push({
        name: `${color.name} ${levels[i]}`,
        id: color.name.toLowerCase().replace(/ /g, '-'),
        hex: scale[i],
        rgb: chroma(scale[i]).css(),
        rgba: chroma(scale[i]).css().replace('rgb', 'rgba').replace(')', ',1.0)'),
      });
    }
  }

  return newPalette;
}

// Generate array with three hex values corresponding to hexColor.darken(1.4), color, and white
function getRange(hexColor) {
  const end = '#fff';
  return [
    chroma(hexColor)
      .darken(1.4)
      .hex(),
    hexColor,
    end,
  ];
}

// Create a scale of colors within the range generated by the getRange function
function generateScale(hexColor, numberOfColors) {
  return chroma.scale(getRange(hexColor)).mode('lab').colors(numberOfColors);
}

export { generatePalette };
